/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPeakFinanceLotteryInterface extends ethers.utils.Interface {
  functions: {
    "buyTickets(uint256,uint32[])": FunctionFragment;
    "claimTickets(uint256,uint256[],uint32[])": FunctionFragment;
    "closeLottery(uint256)": FunctionFragment;
    "drawFinalNumberAndMakeLotteryClaimable(uint256,bool)": FunctionFragment;
    "injectFunds(uint256,uint256)": FunctionFragment;
    "startLottery(uint256,uint256,uint256,uint256[6],uint256)": FunctionFragment;
    "viewCurrentLotteryId()": FunctionFragment;
    "viewUserInfoForLotteryId(address,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyTickets",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTickets",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "closeLottery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "drawFinalNumberAndMakeLotteryClaimable",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "injectFunds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startLottery",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "viewCurrentLotteryId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewUserInfoForLotteryId",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyTickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drawFinalNumberAndMakeLotteryClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "injectFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewCurrentLotteryId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewUserInfoForLotteryId",
    data: BytesLike
  ): Result;

  events: {};
}

export class IPeakFinanceLottery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPeakFinanceLotteryInterface;

  functions: {
    buyTickets(
      _lotteryId: BigNumberish,
      _ticketNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTickets(
      _lotteryId: BigNumberish,
      _ticketIds: BigNumberish[],
      _brackets: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeLottery(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    drawFinalNumberAndMakeLotteryClaimable(
      _lotteryId: BigNumberish,
      _autoInjection: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    injectFunds(
      _lotteryId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startLottery(
      _endTime: BigNumberish,
      _priceTicketInPeak: BigNumberish,
      _discountDivisor: BigNumberish,
      _rewardsBreakdown: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _treasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewCurrentLotteryId(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewUserInfoForLotteryId(
      _user: string,
      _lotteryId: BigNumberish,
      _cursor: BigNumberish,
      _size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], number[], boolean[], BigNumber]>;
  };

  buyTickets(
    _lotteryId: BigNumberish,
    _ticketNumbers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTickets(
    _lotteryId: BigNumberish,
    _ticketIds: BigNumberish[],
    _brackets: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeLottery(
    _lotteryId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  drawFinalNumberAndMakeLotteryClaimable(
    _lotteryId: BigNumberish,
    _autoInjection: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  injectFunds(
    _lotteryId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startLottery(
    _endTime: BigNumberish,
    _priceTicketInPeak: BigNumberish,
    _discountDivisor: BigNumberish,
    _rewardsBreakdown: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _treasuryFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewCurrentLotteryId(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewUserInfoForLotteryId(
    _user: string,
    _lotteryId: BigNumberish,
    _cursor: BigNumberish,
    _size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], number[], boolean[], BigNumber]>;

  callStatic: {
    buyTickets(
      _lotteryId: BigNumberish,
      _ticketNumbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimTickets(
      _lotteryId: BigNumberish,
      _ticketIds: BigNumberish[],
      _brackets: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    closeLottery(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    drawFinalNumberAndMakeLotteryClaimable(
      _lotteryId: BigNumberish,
      _autoInjection: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    injectFunds(
      _lotteryId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startLottery(
      _endTime: BigNumberish,
      _priceTicketInPeak: BigNumberish,
      _discountDivisor: BigNumberish,
      _rewardsBreakdown: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _treasuryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    viewCurrentLotteryId(overrides?: CallOverrides): Promise<BigNumber>;

    viewUserInfoForLotteryId(
      _user: string,
      _lotteryId: BigNumberish,
      _cursor: BigNumberish,
      _size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], number[], boolean[], BigNumber]>;
  };

  filters: {};

  estimateGas: {
    buyTickets(
      _lotteryId: BigNumberish,
      _ticketNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTickets(
      _lotteryId: BigNumberish,
      _ticketIds: BigNumberish[],
      _brackets: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeLottery(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    drawFinalNumberAndMakeLotteryClaimable(
      _lotteryId: BigNumberish,
      _autoInjection: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    injectFunds(
      _lotteryId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startLottery(
      _endTime: BigNumberish,
      _priceTicketInPeak: BigNumberish,
      _discountDivisor: BigNumberish,
      _rewardsBreakdown: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _treasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewCurrentLotteryId(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewUserInfoForLotteryId(
      _user: string,
      _lotteryId: BigNumberish,
      _cursor: BigNumberish,
      _size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTickets(
      _lotteryId: BigNumberish,
      _ticketNumbers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTickets(
      _lotteryId: BigNumberish,
      _ticketIds: BigNumberish[],
      _brackets: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeLottery(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    drawFinalNumberAndMakeLotteryClaimable(
      _lotteryId: BigNumberish,
      _autoInjection: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    injectFunds(
      _lotteryId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startLottery(
      _endTime: BigNumberish,
      _priceTicketInPeak: BigNumberish,
      _discountDivisor: BigNumberish,
      _rewardsBreakdown: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _treasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewCurrentLotteryId(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewUserInfoForLotteryId(
      _user: string,
      _lotteryId: BigNumberish,
      _cursor: BigNumberish,
      _size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
